require "rails_helper"

describe "User's Dashboard" do
  include_context "shared stuff"

  context "home page for logged-in users" do
    it "signs up", js: true do
      visit signup_path
      signup_helper
    end

    it "displays no links when user hasn't added links", js: true do
      visit login_path
      login_helper
      expect(page).to have_content("No links yet")
    end

    it "adds links generated by user to his/her dashboard", js: true do
      visit login_path
      login_helper

      fill_in "Full URL", with: urls[1]
      fill_in "Custom URL (optional)", with: vanity
      click_button "Gobble"

      expect(page).to have_content("0 clicks")
      expect(page).to have_content(urls[1][0..max])
      expect(page).to have_content("/#{vanity}")
    end

    it "allows user view link statistics", js: true do
      visit login_path
      login_helper

      click_link "Statistics"
      expect(page).to have_content(urls[1])
    end

    it "allows user edit link", js: true do
      visit login_path
      login_helper

      click_link "Manage"

      fill_in "Full URL", with: urls[0]
      click_button "Update"

      expect(page).to have_css("#toast-container", text: "Data updated")
      expect(page).to have_content(urls[0][0..max] + "...")
      expect(page).to have_content("/#{vanity}")
    end

    it "prevents users from updating links with invalid details", js: true do
      visit login_path
      login_helper

      click_link "Manage"

      fill_in "Full URL", with: "invalid test"
      click_button "Update"

      expect(page).to have_css(
        "#toast-container",
        text: "Full url is an invalid URL"
      )
      expect(page).to have_content(urls[0][0..max] + "...")
      expect(page).to have_content("/#{vanity}")
    end

    it "ensures links set inactive take effect immediately", js: true do
      visit login_path
      login_helper

      click_link "Manage"

      find(".inactive-text", text: "Inactive").click
      click_button "Update"

      visit "/#{vanity}"
      expect(page).to have_css(
        "#toast-container",
        text: "Link disabled by Creator"
      )
    end

    it "deletes links", js: true do
      visit login_path
      login_helper

      click_link "Manage"

      click_link "Delete"

      expect(page).to have_css(
        "#toast-container", text: "Link deleted successfully!"
      )
      expect(page).to have_no_content(urls[0])
      expect(page).to have_no_content("/#{vanity}")

      visit "/#{vanity}"
      expect(page).to have_css(
        "#toast-container", text: "Link deleted by Creator"
      )
    end
  end
end
